#cloud-config
autoinstall:
  version: 1

  identity:
    hostname: flow-lab
    username: neo
    # SHA-512 crypt hash generated by mkpasswd --method=sha-512 or openssl passwd -6
    password: "$6$NfRRzz/7hPfBkBBo$wpsvBcLUPwGLvTLq/BmnImIUz85OZDYQ8vb7bqTMDEfL2r1F2ShqI5g2Sepripi1sozNEkxITwMPhydpCPwA.1"

  locale: en_CA.UTF-8
  timezone: America/Toronto
  keyboard:
    layout: us

  # Install the full Ubuntu Budgie desktop
  source:
    id: ubuntu-budgie-desktop

  apt:
    preserve_sources_list: false
    primary:
      - arches: [amd64]
        uri: http://archive.ubuntu.com/ubuntu

  storage:
    version: 1
    config:
      # Select the Lexar NVMe by serial and stable by-id path
      - id: disk0
        type: disk
        ptable: gpt
        wipe: superblock-recursive
        serial: NGB625W100602P2202
        path: path: /dev/disk/by-id/nvme-Lexar_SSD_NM790_1TB_NGB625W100602P2202
        model: "Lexar SSD NM790 1TB"

      # EFI System Partition (â‰¥ 538 MiB recommended)
      - id: part-efi
        type: partition
        device: disk0
        size: 550M
        flag: boot
      - id: fs-efi
        type: format
        fstype: vfat
        volume: part-efi
        label: EFISYS
      - id: mnt-efi
        type: mount
        device: fs-efi
        path: /boot/efi

      # Separate /boot on ext4
      - id: part-boot
        type: partition
        device: disk0
        size: 1G
      - id: fs-boot
        type: format
        fstype: ext4
        volume: part-boot
        label: BOOT
      - id: mnt-boot
        type: mount
        device: fs-boot
        path: /boot

      # ZFS pool partition uses the remainder
      - id: part-rpool
        type: partition
        device: disk0
        size: -1

      # ZFS root pool
      - id: rpool
        type: zpool
        name: rpool
        vdevs: [part-rpool]
        pool_properties:
          ashift: "12"
          autotrim: "on"

      # Root dataset (encrypted)
      - id: zfs-root
        type: zfs
        pool: rpool
        filesystem: rpool/ROOT/ubuntu
        mountpoint: /
        fs_properties:
          canmount: "noauto"
          encryption: "aes-256-gcm"
          keyformat: "passphrase"
          keylocation: "prompt"
          compression: "zstd"
          atime: "off"
      - id: zfs-root-mounter
        type: mount
        device: zfs-root
        path: /

      # /var dataset
      - id: zfs-var
        type: zfs
        pool: rpool
        filesystem: rpool/var
        mountpoint: /var
        fs_properties:
          compression: "zstd"
          atime: "off"

      # /home dataset
      - id: zfs-home
        type: zfs
        pool: rpool
        filesystem: rpool/home
        mountpoint: /home
        fs_properties:
          compression: "zstd"
          atime: "off"

  packages:
    - git
    - curl
    - wget
    - make
    - jq
    - yq
    - unzip
    - tar
    - ca-certificates
    - gnupg
    - lsb-release
    - apt-transport-https
    - direnv
    - just
    - uidmap
    - software-properties-common
    - openssh-server
    - build-essential
    - chrony
    - ufw
    - unattended-upgrades
    - zram-generator
    - neovim
    - ripgrep
    - fd-find
    - bat
    - tmux
    - fzf

  late-commands:
    # Docker repository and install
    - |
      curtin in-target --target=/target -- bash -lc 'set -e
      install -m 0755 -d /etc/apt/keyrings
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
      echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu noble stable" > /etc/apt/sources.list.d/docker.list
      export DEBIAN_FRONTEND=noninteractive
      apt-get update
      apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
      usermod -aG docker neo
      systemctl enable docker'

    # uv and pixi installers
    - |
      curtin in-target --target=/target -- bash -lc 'curl -LsSf https://astral.sh/uv/install.sh | sh'
    - |
      curtin in-target --target=/target -- bash -lc 'curl -fsSL https://pixi.sh/install.sh | bash'

    # direnv hook for all bash users (use double quotes so $(...) expands)
    - |
      curtin in-target --target=/target -- bash -lc "echo 'eval \"$(direnv hook bash)\"' >> /etc/bash.bashrc"

    # SSH hardening and enable
    - |
      curtin in-target --target=/target -- bash -lc 'sed -i "s/^#\?PermitRootLogin .*/PermitRootLogin no/" /etc/ssh/sshd_config || true; systemctl enable ssh'

    # UFW baseline rules
    - |
      curtin in-target --target=/target -- bash -lc 'ufw default deny incoming; ufw default allow outgoing; ufw allow OpenSSH; yes | ufw enable'

    # Unattended security upgrades
    - |
      curtin in-target --target=/target -- bash -lc 'dpkg-reconfigure -f noninteractive unattended-upgrades'

    # zram-generator configuration (quoted here-doc to keep YAML intact)
    - |
      curtin in-target --target=/target -- bash -lc 'cat >/etc/systemd/zram-generator.conf << "EOF"
      [zram0]
      zram-size = ram / 2
      compression-algorithm = zstd
      EOF'

  user-data:
    disable_root: true
    package_update: true
    package_upgrade: true
    package_reboot_if_required: true
